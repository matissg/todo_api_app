require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Api::V1::TasksController, type: :controller do

  let(:task) { Task.create!(title: "First Task") }
  let(:id) { task.id }
  let(:valid_attributes) {
    { data: { id: nil, attributes: { title: "Wash Laundry" }, tags: ["Today"] } }
  }
  let(:invalid_attributes) {
      { data: { id: nil, attributes: { title: "A" }, tags: {key: "value"} } }
  }

  let(:valid_session) { {} }

  describe "GET #index" do
    before do
      get :index
    end
    it "returns http success" do
      expect(response).to have_http_status(:success)
    end
    it "JSON body response contains expected recipe attributes" do
      json_response = JSON.parse(response.body)
      expect(json_response.keys).to match_array(["data"])
    end
  end

  describe "GET #show" do
    before do
      get :show, params: {id: task.to_param}
    end
    it "returns http success" do
      expect(response).to have_http_status(:success)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Task" do
        expect {
          post :create, params: valid_attributes, session: valid_session
        }.to change(Task, :count).by(1)
      end

      it "renders a JSON response with the new api/v1_task" do

        post :create, params: valid_attributes, session: valid_session
        json_response = JSON.parse(response.body)
        expect(json_response.keys).to match_array(["data"])
      end
    end

    context "with invalid params" do
      it "renders a JSON response with errors for the new api/v1_task" do

        post :create, params: invalid_attributes, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested api/v1_task" do
        task = Task.create!(title: 'Test')
        put :update, params: {data: { type: "tasks", id: task.id, attributes: {
          title: "Updated Task Title"}}, id: task.id, task: {}}, session: valid_session
        task.reload
        json_response = JSON.parse(response.body)
        expect(json_response.keys).to match_array(["data"])
      end

      it "renders a JSON response with the api/v1_task" do
        task = Task.create!(title: 'Test')

        put :update, params: {data: { type: "tasks", id: task.id, attributes: {
          title: "Updated Task Title"}}, id: task.id, task: {}}, session: valid_session
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq('application/json')
      end
    end

    context "with invalid params" do
      it "renders a JSON response with errors for the api/v1_task" do
        task = Task.create!(title: 'Test')

        put :update, params: {data: { type: "tasks", id: task.id, attributes: {
          title: ""}}, id: task.id, task: {}}, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested api/v1_task" do
      task = Task.create!(title: 'Test')
      expect {
        delete :destroy, params: {id: task.id}, session: valid_session
      }.to change(Task, :count).by(-1)
    end
  end

end
